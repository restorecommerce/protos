syntax = "proto3";

package io.restorecommerce.job;

import "io/restorecommerce/resource_base.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

/**
 * The microservice for scheduling jobs.
 * Provides CRUD operations.
 */
service Scheduling {
  rpc Read (io.restorecommerce.resourcebase.ReadRequest) returns (JobList);
  rpc Create (JobList) returns (JobList);
  rpc Delete (io.restorecommerce.resourcebase.DeleteRequest) returns (google.protobuf.Empty);
  rpc Update (JobList) returns (JobList);
  rpc Upsert (JobList) returns (JobList);
}

/**
 * A Kafka event.
 * Send when a job resource got deleted.
 */
message Deleted {
  string id = 1;
}

/**
 * A list of jobs.
 */
message JobList {
  repeated Job items = 1;
  uint32 total_count = 2;
}

/**
 * A Job resource
 */
message Job {
  /// Job Priority
  enum Priority {
    NORMAL = 0;
    LOW = 10;
    MEDIUM = -5;
    HIGH = -10;
    CRITICAL = -15;
  }

  string id = 1; /// Job resource ID
  double created = 2; /// Date of the Job creation
  double modified = 3; /// Last time the Job was modified
  string creator = 4; /// User ID of the creator

  string name = 10; /// Job name, indicates the job type
  string unique = 11; /// Only one job at a time is allowed when set
  repeated google.protobuf.Any data = 12; /// Payload send to the worker.
  Priority priority = 13; /// Job priority
  uint32 attempts = 14; /// Amount of possible failing runs until job fails
  Backoff backoff = 15; /// Delay settings between failed job runs
  uint32 parallel = 16; /// Number of parallel jobs

  string interval = 20; /// A job is run periodically. Example: "2 seconds"
  string when = 21; /// Job is run once at a specific time. Example: "2 seconds from now"
  bool now = 22; /// When true, the job is run once immediately
}

/**
 * A scheduled Job.
 * Emitted to Kafka by the scheduling service with event name 'queuedJob' and retreived by a service which processes this job.
 */
message ScheduledJob {
  uint32 id = 1; /// Job instance ID
  string name = 2; /// Job name, indicates the job type
  repeated google.protobuf.Any data = 3; /// Payload
  string schedule_type = 4; /// Type of job ex: ONCE, RECURR etc.
  string job_resource_id = 5; /// Job reference ID in the database
  string job_unique_name = 6; /// unique job name in redis
}

/**
 * A finished scheduled Job.
 * Emitted to Kafka by the service which processed the job with event name 'done' and retrieved by the scheduling service.
 */
message JobDone {
  uint32 id = 1; /// Job instance ID
  string schedule_type = 2; /// Type of job ex: ONCE, RECURR etc.
  string job_resource_id = 3; /// Job reference ID in the database
  string job_unique_name = 4; /// unique job name in redis
}

/**
 * A failed scheduled Job event from the Job Service.
 * Emitted to Kafka by the service which processed the Job and retrieved by the scheduling service.
 */
message JobFailed {
  uint32 id = 1; /// Job instance ID
  string error = 2; /// Error message
}

/**
 * Delay between retries.
 */
message Backoff {
  enum Type {
    FIXED = 0; /// Retry with the same delay
    EXPONENTIAL = 1; /// Exponential delay increase between retries
  }
  double delay = 1; /// Time until retry in milliseconds
  Type type = 2; /// Calculation of the delay
}
