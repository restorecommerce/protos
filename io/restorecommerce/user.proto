syntax = "proto3";

package io.restorecommerce.user;

import "io/restorecommerce/resource_base.proto";
import "google/protobuf/empty.proto";

/**
 * The microservice for the user resource.
 */
service Service {
  rpc Read (io.restorecommerce.resourcebase.ReadRequest) returns (UserList);
  rpc Create (UserList) returns (UserList);
  rpc Delete (io.restorecommerce.resourcebase.DeleteRequest) returns (google.protobuf.Empty);
  rpc Update (UserList) returns (UserList);
  rpc Upsert (UserList) returns (UserList);

  rpc Find (FindRequest) returns (UserList);
  rpc Register (RegisterRequest) returns (User);
  rpc Activate (ActivateRequest) returns (google.protobuf.Empty);
  rpc ChangePassword (ChangePasswordRequest) returns (google.protobuf.Empty);
  rpc RequestEmailChange (ChangeEmailRequest) returns (google.protobuf.Empty);
  rpc ConfirmEmailChange (ConfirmEmailChangeRequest returns (google.protobuf.Empty);
  rpc Unregister (UnregisterRequest) returns (google.protobuf.Empty);
  rpc Login (LoginRequest) returns (User);
  rpc FindByRole(FindByRoleRequest) returns (UserList);
}

/**
* Request to verify password and retrieve the user's info.
* Either name or email can be provided.
*/
message LoginRequest {
  string name = 1; // User name
  string email = 2; // User email
  string password = 3; // Raw password
}

message FindRequest {
  string id = 1; /// User ID
  string name = 2;
  string email = 3;
}

message RegisterRequest {
  bool guest = 1;
  string name = 2;
  string first_name = 3;
  string last_name = 4;
  string email = 5;
  string password = 6;
  string creator = 7;
  string timezone = 8;
  string locale_id = 9;

  repeated RoleAssociation role_associations = 10;
}

message ActivateRequest {
  string name = 1; /// User name (unique)
  string activation_code = 2;
}

message ChangePasswordRequest {
  string id = 1; /// User ID
  string password = 2;
  string new_password = 3;
}

message ChangeEmailRequest {
  string id = 1; /// User ID
  string email = 2;
}

message ConfirmEmailChangeRequest {
  string id = 1; /// User ID
  string email = 2;
}

message UnregisterRequest {
  string id = 1; /// User ID
}

/**
 * User deletion event.
 * Send when a user was deleted or unregistered.
 *
 * Events:
 * usersDeleted,
 * unregistered,
 */
message Deleted {
  string id = 1;
}

/**
 * User password changed event.
 *
 * Events:
 * passwordChanged,
 */
message PasswordChanged {
  string id = 1; /// User ID
  string password_hash = 2;
}

/**
 * User email id changed event.
 *
 * Events:
 * email,
 */
message EmailChanged {
  string id = 1; /// User ID
  string email = 2;
}

/**
 * A list of User.
 */
message UserList {
  repeated User items = 1;
  uint32 total_count = 2;
}

/**
 * User activation request.
 */
message Activate {
  string id = 1; /// User ID
}

message FindByRoleRequest {
  string role = 1;
  repeated Attribute attributes = 2;
}

/**
 * A User resource.
 */
message User {
  string id = 1; /// User ID, unique, key
  double created = 2; /// Date of the user creation
  double modified = 3; /// Last time the user was modified
  string creator = 4; /// User ID of the creator

  string name = 5; // The name of the user, can be used for login
  string first_name = 6;
  string last_name = 7;
  string email = 8; /// Email address, can be used for login
  string emailNew = 9; /// New email address; set by `requestEmailChange` and overrides actual email upon `confirmEmailChange`
  bool active = 10; /// If the user was activated via the activation process
  string activation_code = 11; /// Activation code used in the activation process
  string password = 12; /// Raw password, not stored
  string password_hash = 13; /// Encrypted password, stored
  bool guest = 14; /// Is the user a guest. A guest is a automatically generated user which can later be turned in a non-guest user.
  repeated RoleAssociation role_associations = 15; // A user can have multiple roles and different attributes coupled with each role
  string timezone = 16;	// timezone specifications
  string locale_id = 17;	// locale specifications
}

message RoleAssociation {
  string role = 1;  // role ID
  repeated Attribute attributes = 2;  // useful attributes for RBAC/ABAC like organizational scope
}

message Attribute {
  string id = 1;
  string value = 2;
}
